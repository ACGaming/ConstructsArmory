buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.12.2-1.0.0"
group = "c4.conarm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "conarm"

minecraft {
    version = "1.12.2-14.23.4.0-SwimSpeedAttribute"
    runDir = "run"
    useDepAts = true

    mappings = "snapshot_20171003"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileApiJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        url = "http://dvs1.progwml6.com/files/maven"
    }

    maven {
        // CraftTweaker
        name 'jared maven'
        url "http://maven.blamejared.com/"
    }
}

dependencies {

    def jei_mc_version = "1.12.2"
    def jei_version = "4.8.5.159"

    ////JEI stuff
    deobfCompile "mezz.jei:jei_${jei_mc_version}:${jei_version}"

    def mc_version = "1.12"
    def ct_mc_version = "MC1120"
    def ct_version = "4.1.2.404"

    deobfCompile("CraftTweaker2:CraftTweaker2-${ct_mc_version}-Main:${mc_version}-${ct_version}")
	

}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar